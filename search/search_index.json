{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to kskit","text":""},{"location":"#what-is-kskit","title":"What is kskit?","text":"<p>kskit is a reusable toolset for deidentifiying images and metadata contained inside DICOM files. kskit stands on the shoulders of giants (PyTorch, easyOCR)</p> <p>This package was initially built for processing medical data from the Deep.Piste study. It was primarly made for mammograms.</p>"},{"location":"#image-deidentification","title":"Image Deidentification","text":"<p>Image deidentification is the process of removing text information that can be used to identify an individual from an image. Our method uses Optical Text Recognition (OCR) for retrieving all text boxes present on an image. Then, we extract image coordinates from these text boxes and use them to hide information.</p> <p> </p> <p>kskit image deidentifier can also work with a list of authorized words. This list can be used to keep useful information on your image. For instance, let's say we'd like to keep information related to image laterality if present on our images (circled in green in the following image). All other text information will be considered as sensible (circled in red in the following image).</p> <p></p> <p>Info</p> <p>The previous image has been obtained from the public dataset The Chinese Mammography Database (CMMD): An online mammography database with biopsy confirmed types for machine diagnosis of breast. This dataset is accessible through the The Cancer Imaging Archive (TCIA) Retriever tool.</p>"},{"location":"#attributes-deidentification","title":"Attributes Deidentification","text":"<p>Attributes or Metadata Deidentification is the process of removing sensible text information that can be used to identify an individual from a DICOM file attributes dataset. Expand the following section to see an example of DICOM attributes dataset.</p> Example <pre><code>Dataset.file_meta -------------------------------\n(0002, 0000) File Meta Information Group Length  UL: 208\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\n(0002, 0002) Media Storage SOP Class UID         UI: Digital Mammography X-Ray Image Storage - For Presentation\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.58672524\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Little Endian\n(0002, 0012) Implementation Class UID            UI: 1.3.6.1.4.1.22213.1.143\n(0002, 0013) Implementation Version Name         SH: '0.5'\n(0002, 0016) Source Application Entity Title     AE: 'POSDA'\n-------------------------------------------------\n(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'\n(0008, 0008) Image Type                          CS: ['DERIVED', 'PRIMARY']\n(0008, 0012) Instance Creation Date              DA: '20170818'\n(0008, 0013) Instance Creation Time              TM: '114640'\n(0008, 0014) Instance Creator UID                UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.25669314\n(0008, 0016) SOP Class UID                       UI: Digital Mammography X-Ray Image Storage - For Presentation\n(0008, 0018) SOP Instance UID                    UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.58672524\n(0008, 0020) Study Date                          DA: '20100718'\n(0008, 0021) Series Date                         DA: '20100718'\n(0008, 0022) Acquisition Date                    DA: '20100718'\n(0008, 0023) Content Date                        DA: '20100718'\n(0008, 0030) Study Time                          TM: '000000'\n(0008, 0031) Series Time                         TM: '000000'\n(0008, 0032) Acquisition Time                    TM: '000000'\n(0008, 0033) Content Time                        TM: '000000'\n(0008, 0050) Accession Number                    SH: ''\n(0008, 0060) Modality                            CS: 'MG'\n(0008, 0068) Presentation Intent Type            CS: 'FOR PRESENTATION'\n(0008, 0070) Manufacturer                        LO: ''\n(0008, 0090) Referring Physician's Name          PN: ''\n(0008, 2218)  Anatomic Region Sequence  1 item(s) ---- \n(0008, 0100) Code Value                          SH: '76752008'\n(0008, 0102) Coding Scheme Designator            SH: 'SCT'\n(0008, 0104) Code Meaning                        LO: 'Breast'\n---------\n(0010, 0010) Patient's Name                      PN: 'D1-0002'\n(0010, 0020) Patient ID                          LO: 'D1-0002'\n(0010, 0030) Patient's Birth Date                DA: ''\n(0010, 0040) Patient's Sex                       CS: 'F'\n(0010, 1010) Patient's Age                       AS: '040Y'\n(0012, 0062) Patient Identity Removed            CS: 'YES'\n(0012, 0063) De-identification Method            LO: 'Per DICOM PS 3.15 AnnexE. Details in 0012,0064'\n(0012, 0064)  De-identification Method Code Sequence  8 item(s) ---- \n(0008, 0100) Code Value                          SH: '113100'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Basic Application Confidentiality Profile'\n---------\n(0008, 0100) Code Value                          SH: '113101'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Clean Pixel Data Option'\n---------\n(0008, 0100) Code Value                          SH: '113104'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Clean Structured Content Option'\n---------\n(0008, 0100) Code Value                          SH: '113105'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Clean Descriptors Option'\n---------\n(0008, 0100) Code Value                          SH: '113107'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Retain Longitudinal Temporal Information Modified Dates Option'\n---------\n(0008, 0100) Code Value                          SH: '113108'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Retain Patient Characteristics Option'\n---------\n(0008, 0100) Code Value                          SH: '113109'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Retain Device Identity Option'\n---------\n(0008, 0100) Code Value                          SH: '113111'\n(0008, 0102) Coding Scheme Designator            SH: 'DCM'\n(0008, 0104) Code Meaning                        LO: 'Retain Safe Private Option'\n---------\n(0013, 0010) Private Creator                     LO: 'CTP'\n(0013, 1010) Private tag data                    LO: 'CMMD'\n(0013, 1013) Private tag data                    LO: '12391759'\n(0018, 0015) Body Part Examined                  CS: 'BREAST'\n(0018, 1164) Imager Pixel Spacing                DS: [0.094090909, 0.094090909]\n(0018, 1508) Positioner Type                     CS: 'MAMMOGRAPHIC'\n(0018, 7004) Detector Type                       CS: 'SCINTILLATOR'\n(0020, 000d) Study Instance UID                  UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.24151979\n(0020, 000e) Series Instance UID                 UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.61082364\n(0020, 0010) Study ID                            SH: ''\n(0020, 0011) Series Number                       IS: '1'\n(0020, 0013) Instance Number                     IS: '2'\n(0020, 0020) Patient Orientation                 CS: ['A', 'FR']\n(0020, 0062) Image Laterality                    CS: 'L'\n(0028, 0002) Samples per Pixel                   US: 1\n(0028, 0004) Photometric Interpretation          CS: 'MONOCHROME2'\n(0028, 0010) Rows                                US: 2294\n(0028, 0011) Columns                             US: 1914\n(0028, 0100) Bits Allocated                      US: 8\n(0028, 0101) Bits Stored                         US: 8\n(0028, 0102) High Bit                            US: 7\n(0028, 0103) Pixel Representation                US: 0\n(0028, 0301) Burned In Annotation                CS: 'NO'\n(0028, 0303) Longitudinal Temporal Information M CS: 'MODIFIED'\n(0028, 1040) Pixel Intensity Relationship        CS: 'LOG'\n(0028, 1041) Pixel Intensity Relationship Sign   SS: -1\n(0028, 1050) Window Center                       DS: '128.0'\n(0028, 1051) Window Width                        DS: '256.0'\n(0028, 1052) Rescale Intercept                   DS: '0.0'\n(0028, 1053) Rescale Slope                       DS: '1.0'\n(0028, 1054) Rescale Type                        LO: 'US'\n(0028, 1055) Window Center &amp; Width Explanation   LO: 'Full width of 8 bit data'\n(0028, 1056) VOI LUT Function                    CS: 'SIGMOID'\n(0028, 2110) Lossy Image Compression             CS: '00'\n(0040, 0318) Organ Exposed                       CS: 'BREAST'\n(0040, 0555)  Acquisition Context Sequence  0 item(s) ---- \n(0054, 0220)  View Code Sequence  1 item(s) ---- \n(0008, 0100) Code Value                          SH: '399368009'\n(0008, 0102) Coding Scheme Designator            SH: 'SCT'\n(0008, 0104) Code Meaning                        LO: 'medio-lateral oblique'\n(0054, 0222)  View Modifier Code Sequence  0 item(s) ---- \n---------\n(2050, 0020) Presentation LUT Shape              CS: 'IDENTITY'\n(7fe0, 0010) Pixel Data                          OB: Array of 4390716 elements\n</code></pre> <p>Info</p> <p>The previous dataset has been obtained from the public dataset The Chinese Mammography Database (CMMD): An online mammography database with biopsy confirmed types for machine diagnosis of breast. This dataset is accessible through the The Cancer Imaging Archive (TCIA) Retriever tool.</p> <p>The attributes deidentifier is based on a customizable recipe which is a file describing deidentification actions for each DICOM attribute. The recipe file is written in JSON:</p> <pre><code>{\n    \"0x00020000\": [\n        \"FileMetaInformationGroupLength\",\n        \"UL\",\n        \"CONSERVER\"\n    ],\n    \"0x001811BB\": [\n        \"AcquisitionFieldOfViewLabel\",\n        \"LO\",\n        \"PSEUDONYMISER\"\n    ],\n    \"0x001021B0\": [\n        \"AdditionalPatientHistory\",\n        \"LT\",\n        \"RETIRER\"\n    ]\n    \"0x00080032\": [\n        \"AcquisitionTime\",\n        \"TM\",\n        \"EFFACER\"\n    ]\n}\n</code></pre> <p>A <code>recipe.json</code> file is already available inside kskit package. However, it is possible to define your own <code>recipe.json</code>.</p> <p>Warning</p> <p>The inbuilt <code>recipe.json</code> file was created for the Deep.Piste study. It was made for mammograms only and you should probably define your own file meeting your own needs.</p> <p>If you don't define a new <code>recipe.json</code> folder, kskit will show a warning and automatically use its inbuilt referential.</p> <p>In order to do define your own <code>recipe.json</code>, you'll have to create the file <code>$DP_HOME/data/input/recipe.json</code> and respect this structure:</p> <pre><code>{\n    \"HEXADECIMAL_DICOM_TAG_ATTRIBUTE\": [\n        \"AttributeName\",\n        \"AttributeType\",\n        \"DeidentificationAction\"\n    ]\n    ...\n}\n</code></pre> <p>Note</p> <ul> <li><code>AttributeName</code> is only used for making the file readable for humans</li> <li><code>AttributeType</code> is the attribute's DICOM Value Representation (VR). It is represented by two letters.</li> <li><code>DeidentificationAction</code> is a string that defines which action kskit deidentifier will take for a specific attribute. This value should be among the possible actions in the below table.</li> </ul> Action (French Name) Equivalent in English Description CONSERVER KEEP The attribute will be kept. EFFACER ERASE The attribute will still be in the dataset but its value will be blanked. RETIRER REMOVE The attribute will be removed from the dataset. PSEUDONYMISER DEIDENTIFY The attribute will be deidentified. <p>Warning</p> <p>English names are not supported inside the <code>recipe.json</code>. The equivalent column above is just for information purposes.</p>"},{"location":"pages/about/","title":"Aiacem si tum est concuteret prora","text":""},{"location":"pages/about/#hanc-tempore","title":"Hanc tempore","text":"<p>Lorem markdownum Thybris! Nobis populandas domini, primum spumas se absentem credule praebetque duabus pendere, amore Ergo pendere. Et illic, in multa et certe, ostendens incendia tempus venires, digna habenas.</p> <ul> <li>Nece deum visamque templum Theti amorem pallentemque</li> <li>Corruit dicto</li> <li>Adductaque submovit terras in fatus</li> <li>Tristis dic lauro loquendo</li> <li>Habitandae mansit omnes maternaque summoveant modo ense</li> <li>Fecit in conceptas decens</li> </ul>"},{"location":"pages/about/#se-tagen-spiritus-tandem","title":"Se Tagen spiritus tandem","text":"<p>Cur pater ut serva insiluit figis, laborem culmine fateor loqui, dilataque iustis Athenae minas. Sic certamen quam, medio. Iunone scelerique rogantis legit tamen est adduxit hunc novem, una flumina erat longos vinctorum et. Troiae ferinas: spumis exitus primum venientia corpore, mala Mavortis, est postera aquae longi: quid manuum.</p> <ul> <li>Adacta qua</li> <li>Spectem qualia latratibus Bacchus canis</li> <li>Virgo his inmitibus mediaque alis iussis</li> <li>Tamen est tamquam auspiciis id loca</li> </ul> <p>Arce deinde, in cernitis Nesso molitor et Pittheia, rivi. Nant extulit, et pando nemorosis oro ab parens equorum veniente volucresque terra omnia densa contigero sub.</p>"},{"location":"pages/about/#deoida-sonum-spatium","title":"Deoida sonum spatium","text":"<p>Colcha quid nec novata novae modo placido tamen: bella erat de longique infausto nata? Sponte in conscia fugato cupiunt promissaque qua semina sub: ista.</p> <pre><code>if (1) {\n    mirrored_macintosh_disk = -3 - unmount;\n}\nvar pc = -2;\ncdfs_plug_autoresponder = upload_archive_nanometer + boxLcdWinsock;\n</code></pre> <p>Vincemur illas. Ferro gratantibus fieri in mihi quamvis tibi vestrae volucrum. Interdum testantia certas, ora villosis, ungula accessi laeta, molis et omnia invitum, voce. Fugit tuam sic, quem quo uberior monendo tabo Niobe ictus mihi Iuppiter, nostroque.</p> <p>Ille sitvs, incerto alienisque funera, ait florem ademptae oscula. Vulnere non dixerat Trinacris nidum hac figurae nescio, ab licet praescia quam dubitat, curva ut castris. Incepti soror dea ut timidumque medio sedit utere luctus inpar?</p>"},{"location":"pages/deid_mammogram/","title":"Mammogram Deidentification","text":"Deidentification Functionalities Image Deidentification based on OCR Attributes/Metadata Deidentification based on a Recipe"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram","title":"<code>kskit.dicom.deid_mammogram</code>","text":"<p>This module is a mammograms deidentification toolbox.</p> <p>This module contains functions related to deidentification of mammograms. It fulfills the following purposes:</p> <ul> <li>deidentifying mammogram's images</li> <li>deidentifying mammogram's metadata</li> </ul>"},{"location":"pages/deid_mammogram/#image-deidentification","title":"Image Deidentification","text":"Example get_PIL_image.py<pre><code>from kskit.dicom.deid_mammogram import get_PIL_image\nimport pydicom\n\nds = pydicom.read_file(\"my-mammogram.dcm\")\nimg = get_PIL_image(ds)\nimg.show()\n</code></pre> <p>Info</p> <p>The list of available languages can be found here.</p>"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.deidentify_image_png","title":"<code>deidentify_image_png(infile, outdir, filename)</code>","text":"<p>Deidentify and write a given mammogram's image in outdir as filename.png</p> <p>This function invokes the OCR reader for getting all potential words on a  mammogram's image. Then, it hides all found words by higlighting them in black. </p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The path of the DICOM file to deidentify.</p> required <code>outdir</code> <code>str</code> <p>The path of the directory that will store the output.</p> required <code>filename</code> <code>str</code> <p>The name of the resulting PNG file. (don't add the file extension).</p> required"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.get_PIL_image","title":"<code>get_PIL_image(dataset)</code>","text":"<p>Get Image object from Python Imaging Library(PIL)</p> <p>Get the image from the pydicom dataset and convert it from a numpy.ndarray to a PIL image object. If available, the function will use metadata information  contained inside the pydicom dataset for the conversion.  </p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>A pydicom dataset which can be obtained from a DICOM file.</p> required <p>Returns:</p> Name Type Description <code>Image</code> <code>Image</code> <p>A PIL image object.</p>"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.get_text_areas","title":"<code>get_text_areas(pixels, languages=['fr'])</code>","text":"<p>Read and return words of an image.</p> <p>This function takes a pixel array in input and submits it to the easyOCR Reader. This Reader will then return a list of found words. This function implicitly  remove authorized words from the computed list.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>ndarray</code> <p>An array representing an image.</p> required <code>languages</code> <code>list</code> <p>A list of supported languages for the OCR Reader. This allows to submit images with text written in different languages.</p> <code>['fr']</code> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of words detected on the submitted image.</p>"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.remove_authorized_words_from","title":"<code>remove_authorized_words_from(ocr_data)</code>","text":"<p>Remove authorized words from ocr_data list</p> <p>This function allows to remove authorized words from easyOCR output. It is useful if you want to keep some text information on your image such as image laterality information (RMLO, LCC, OBLIQUE G...).</p> <p>Parameters:</p> Name Type Description Default <code>ocr_data</code> <code>list</code> <p>A list of words and coordinates obtained after submitting an image to easyOCR Reader.</p> required <p>Returns:</p> Type Description <code>list</code> <p>The same list of words and coordinates minus the authorized words elements.</p>"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.hide_text","title":"<code>hide_text(pixels, ocr_data, color_value='black', mode='rectangle')</code>","text":"<p>Censor text present on the pixels array representing an image.</p> <p>Take the input image and draw new shapes with PIL package in order to censor OCR-detected words.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>ndarray</code> <p>A pixels array representing an image</p> required <code>ocr_data</code> <code>list</code> <p>A list of words and coordinates obtained by easyOCR Reader after submitting an image.</p> required <code>color_value</code> <code>str</code> <p>A string indicating the color of the rectangle used for censoring information (<code>white</code> or <code>black</code>)</p> <code>'black'</code> <code>mode</code> <code>str</code> <p>A string indicating the method for censoring information. (<code>blur</code> or <code>rectangle</code>)</p> <code>'rectangle'</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>The deidentified pixels array.</p>"},{"location":"pages/deid_mammogram/#attributes-deidentification","title":"Attributes Deidentification","text":"<p>Info</p> <p><code>org_root</code> refers to a prefix used for deidentifying DICOM UIDs.  This prefix has to be unique for your organization.</p> <p>For more information, see NEMA DICOM Standards Documentation.</p> Example <p>Let's test our recipe by adding one of its attribute into a pydicom dataset. The attribute in our recipe looks like this: <pre><code>\"0x00209161\": [\n    \"ConcatenationUID\",\n    \"UI\",\n    \"PSEUDONYMISER\"\n],\n</code></pre></p> <p>Step n\u00b01: We add the new DICOM UID to our pydicom dataset <pre><code>import pydicom\n\nds = pydicom.read_file(\"my-mammogram.dcm\")\nds.add_new(\"0x00209161\", \"UI\", \"1.123.123.1234.123456.12345678\")\nds.save_as(\"my-modified-mammogram.dcm\")\n</code></pre></p> <p>It will then appear inside your pydicom dataset: <pre><code>(0020, 9161) Concatenation UID                   UI: 1.123.123.1234.123456.12345678\n</code></pre></p> <p>Step n\u00b02: We deidentify the folder containing our test mammogram <pre><code>from kskit.dicom.deid_mammogram import deidentify_attributes\n\ndf = deidentify_attributes(\"/path/to/mammogram/folder\", \"/path/to/outdir\", org_root=\"9.9.9.9.9\", erase_outdir=False)\nprint(df.ConcatenationUID_0x00209161_UI_1____)\n</code></pre> <pre><code>9.9.9.9.9.474079559915109435636573090782\n</code></pre></p> <p>Note</p> <p>You don't have to call this function as it already implicitly called by deidentify_attributes.</p> <p>Tip</p> <p>This function can be called to check if your customized recipe is correctly detected by kskit.</p> Example load_recipe.py<pre><code>from kskit.dicom.deid_mammogram import load_recipe\n\nrecipe = load_recipe()\nprint(recipe)\n</code></pre> <pre><code>{'0x00020000': ['FileMetaInformationGroupLength', 'UL', 'CONSERVER'], '0x00020001': ['FileMetaInformationVersion', 'OB', 'CONSERVER']}\n</code></pre> <p>Note</p> <p>This function is implicitly called by deidentify_attributes each time it needs to take a deidentification action.</p> <p>Warning</p> <p>This function takes a zero trust approach when encountering unknown tags and will always return RETIRER (= REMOVE) for all tags not found inside the recipe.</p> Example <p>Example n\u00b01: Retrieve a rule for a tag inside the recipe</p> <p>get_rule_for_known_tag.py<pre><code>from kskit.dicom.deid_mammogram import load_recipe, get_rule\n\nrecipe = load_recipe()\nrule = get_rule(\"0x00020000\", recipe)\n</code></pre> <pre><code>CONSERVER\n</code></pre></p> <p>Example n\u00b02: Retrieve a rule for a tag that is not declared inside the recipe</p> <p>get_rule_for_unknown_tag.py<pre><code>from kskit.dicom.deid_mammogram import load_recipe, get_rule\n\nrecipe = load_recipe()\nrule = get_rule(\"0x00026666\", recipe)\n</code></pre> <pre><code>RETIRER\n</code></pre></p>"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.deidentify_attributes","title":"<code>deidentify_attributes(indir, outdir, org_root, erase_outdir=True)</code>","text":"<p>Produce a Pandas dataframe with deidentified information from a folder of DICOM files.</p> <p>This function creates a Pandas dataframe from all files present in the <code>indir</code> folder. Then, it loads the deidentification recipe and iterates through the dataframe to deidentify its content. Finally, it returns the deidentified dataframe object. </p> <p>It also takes <code>outdir</code> and <code>erase_outdir</code> arguments for handling output directory auto-cleaning in the context of a data pipeline. If you're not interested in auto-cleaning your output repository, simply specify <code>outdir</code> and set <code>erase_outdir</code> to <code>False</code>.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>The input directory (DICOM files to deidentify)</p> required <code>outdir</code> <code>str</code> <p>The output directory (deidentified/resulting files)</p> required <code>org_root</code> <code>str</code> <p>An organization root identifier for deidentifying DICOM UIDs.</p> required <code>erase_outdir</code> <code>bool</code> <p>Empty the output directory if True</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A Pandas dataframe containing all metadata/attributes information.</p>"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.load_recipe","title":"<code>load_recipe()</code>","text":"<p>Get the recipe from recipe.json and load it into a python dict.</p> <p>This function reads <code>recipe.json</code>. If a user-defined version of the file is detected inside <code>$DP_HOME/data/input</code>, it will be used. Otherwise, the inbuilt version of the file will be used.</p> <p>Be aware that the inbuilt version of the file does not suit a generic usage. It was created for the Deep.piste study. It is highly recommended to create your own version of <code>recipe.json</code>.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A Python dictionary with recipe elements.</p>"},{"location":"pages/deid_mammogram/#kskit.dicom.deid_mammogram.get_rule","title":"<code>get_rule(tag, recipe)</code>","text":"<p>Get the rule associated with the given tag in <code>recipe.json</code></p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>A DICOM tag</p> required <code>recipe</code> <code>dict</code> <p>A Python dictionary containing recipe elements. See <code>load_recipe()</code></p> required <p>Returns:</p> Type Description <code>str</code> <p>The action associated to this DICOM tag in the provided recipe. It can be anything among deidentification actions (CONSERVER, RETIRER EFFACER, PSEUDONYMISER)</p>"},{"location":"pages/license/","title":"License","text":""},{"location":"pages/license/#mit-license","title":"MIT License","text":"<p>Copyright 2020 Epiconcept</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"pages/quickstart/","title":"Quickstart","text":""},{"location":"pages/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>Optical Character Recognition (OCR) is an intensive resource-consuming process and it is recommended to have at least 4 GB of free RAM for running kskit functionalities related to image deidentification.</p> <p>Info</p> <p>kskit relies on <code>easyOCR</code> which uses <code>PyTorch</code>. If your system does not have a GPU, consider installing <code>PyTorch</code> CPU-only version (more information here).</p> <ul> <li>For installing <code>PyTorch</code> and <code>PyTorch Vision</code> CPU-only dependencies on a Linux system, run the command below:</li> </ul> <pre><code>pip3 install torch torchvision --extra-index-url https://download.pytorch.org/whl/cpu\n</code></pre> <ul> <li>If you have a GPU on your system, please install the correct version of <code>PyTorch</code> and <code>PyTorch Vision</code> for your computer (PyTorch Installation Guide).</li> </ul>"},{"location":"pages/quickstart/#installation","title":"Installation","text":"<p>For installing <code>kskit</code> tools, run the following command:</p> <pre><code>pip install kskit\n</code></pre> <p>After that, you'll have to define an environment variable called <code>DP_HOME</code>. This variable is used to locate your data directory where you'll:</p> <ul> <li>put your DICOM files for submitting them to the deidentifier tool</li> <li>find the output of the deidentifier tool (deidentified information)</li> <li>define referentials used by the package (<code>recipe.json</code>, <code>ocr_deid_words.txt</code>)</li> </ul> <p>To define this data directory, run the following command:</p> <pre><code>export DP_HOME=/path/to/folder\n</code></pre> <p>Info</p> <p>You can set this folder wherever you want. However, keep in mind that this folder is essential for the package and you'll probably open it more than once. So, don't put it somewhere too complicated to access.</p>"},{"location":"pages/quickstart/#start-working-with-kskit","title":"Start working with kskit","text":"deidentify_image.py<pre><code>from kskit.dicom.deid_mammogram import deidentify_image_png\n\ndeidentify_image_png(\n    \"/data/dicoms/1.3.6.1.4.1.9590.100.1.2.16146556.dcm\",\n    \"/data/processed\",\n    \"1.3.6.1.4.1.9590.100.1.2.16146556\"\n)\n</code></pre>"}]}